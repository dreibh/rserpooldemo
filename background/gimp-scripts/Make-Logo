#!/bin/bash -e
#
# Logo Script
# Copyright (C) 2017 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


# Examples:
# Make-Logo NorNet1.png "NorNet Testbed" 128 5 "Golden" "Eras"
# Make-Logo NorNet2.png "NorNet Testbed" 128 5 "Brushed Aluminium" "Comic Sans MS"


# ====== Handle arguments ===================================================
if [ $# -lt 3 ] ; then
   echo >&2 "Usage: $0 filename logo_text logo_size [border_size [colorscheme [fontname]]]"
   exit 1
fi
FILENAME="$1"
CONTENT="$2"
FONTSIZE=$3
BORDERSIZE=5
COLORSCHEME="Golden"
FONTNAME="Eras"
if [ $# -gt 3 ] ; then
   BORDERSIZE="$4"
fi
if [ $# -gt 4 ] ; then
   COLORSCHEME="$5"
fi
if [ $# -gt 5 ] ; then
   FONTNAME="$6"
fi


# ====== Call Gimp ==========================================================
( cat <<EOF

; script-fu-glossy-logo copied from /usr/share/gimp/2.0/scripts/glossy.scm:
; The only difference is that gimp-display-new is commented out for non-GUI run.
(define (script-fu-glossy-logo2 text
                               size
                               font
                               blend-gradient-text
                               blend-gradient-text-reverse
                               blend-gradient-outline
                               blend-gradient-outline-reverse
                               grow-size
                               bg-color
                               use-pattern-text
                               pattern-text
                               use-pattern-outline
                               pattern-outline
                               use-pattern-overlay
                               pattern-overlay
                               noninteractive
                               shadow-toggle
                               s-offset-x
                               s-offset-y)
  (let* (
        (img (car (gimp-image-new 256 256 RGB)))
        (text-layer (car (gimp-text-fontname img -1 0 0 text 30 TRUE size PIXELS font)))
        )
    (gimp-image-undo-disable img)
    (apply-glossy-logo-effect img text-layer
                              blend-gradient-text
                              blend-gradient-text-reverse
                              blend-gradient-outline
                              blend-gradient-outline-reverse
                              grow-size bg-color
                              use-pattern-text pattern-text
                              use-pattern-outline pattern-outline
                              use-pattern-overlay pattern-overlay
                              noninteractive shadow-toggle
                              s-offset-x s-offset-y)
    (gimp-image-undo-enable img)
    ; (gimp-display-new img)   ; !!! Do not show result!
  )
)

(let*
   ((fileName    "$FILENAME")
    (logoText    "$CONTENT")
    (fontName    "$FONTNAME")
    (fontSize     $FONTSIZE)
    (borderSize   $BORDERSIZE)
    (colorScheme "$COLORSCHEME")
    (image (car (script-fu-glossy-logo2 logoText fontSize fontName colorScheme FALSE colorScheme FALSE borderSize "white" FALSE "Electric Blue" FALSE "Electric Blue" FALSE "Parque #1" TRUE TRUE 8 8)))
    (drawable (car (gimp-image-get-active-layer image)))
    (layers (gimp-image-get-layers image))
    (num-layers (car layers))
    (layer-array (cadr layers))
    (l1 (aref layer-array 0))
    (l2 (aref layer-array 1))
    (bg-layer (aref layer-array (- num-layers 1)))
   )

   (gimp-layer-set-visible bg-layer FALSE)
   (gimp-displays-flush)
   (gimp-image-merge-visible-layers image EXPAND-AS-NECESSARY)

   (set! drawable (car (gimp-image-get-active-layer image)))
   ; For XCF file output: (gimp-file-save RUN-NONINTERACTIVE image drawable fileName fileName)
   (file-png-save2 RUN-NONINTERACTIVE image drawable fileName fileName TRUE 9 TRUE TRUE FALSE TRUE TRUE FALSE TRUE)
)
(gimp-quit TRUE)
EOF
) | env LANG=C gimp --new-instance --no-interface --no-splash --batch - 2>/dev/null | \
       ( grep -vE "^ts>|^Copyright|^Welcome|^$" || true )

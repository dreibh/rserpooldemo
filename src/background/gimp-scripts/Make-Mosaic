#!/usr/bin/env bash
#
# Mosaic Script
# Copyright (C) 2017-2025 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: thomas.dreibholz@gmail.com

# Bash options:
set -eu


# Example:
# Make-Mosaic Image.jpeg Mosaic.png 24 4 4 hexagons rough
# Make-Mosaic Image.jpeg Mosaic.png 32 4 2 octagons smooth


# ====== Handle arguments ===================================================
if [ $# -lt 5 ] ; then
   echo >&2 "Usage: $0 input_filename output_filename tile_size tile_height tile_spacing [squares|hexagons|octagons|triangles [smooth|rough]]"
   exit 1
fi
INPUT_FILENAME="$1"
OUTPUT_FILENAME="$2"
TILE_SIZE=$3
TILE_HEIGHT=$4
TILE_SPACING=$5
TILE_NEATNESS=0.65
TILE_TYPE="6"
TILE_TYPESTRING="hexagons"
TILE_SURFACE=0
VERBOSE=0
if [ $# -gt 5 ] ; then
   TILE_TYPESTRING="$6"
   if [ "${TILE_TYPESTRING}" = "squares" ] ; then
      TILE_TYPE=0
   elif [ "${TILE_TYPESTRING}" = "hexagons" ] ; then
      TILE_TYPE=1
   elif [ "${TILE_TYPESTRING}" = "octagons" ] ; then
      TILE_TYPE=2
   elif [ "${TILE_TYPESTRING}" = "triangles" ] ; then
      TILE_TYPE=3
   else
      echo >&2 "Invalid tile type: ${TILE_TYPESTRING}"
      exit 1
   fi
fi
if [ $# -gt 6 ] ; then
   if [ "$7" = "smooth" ] ; then
      TILE_SURFACE=0
   elif [ "$7" = "rough" ] ; then
      TILE_SURFACE=1
   else
      echo >&2 "Invalid tile surface: $7"
      exit 1
   fi
fi

# ====== Call GIMP ==========================================================
rm -f "${OUTPUT_FILENAME}"
( cat <<EOF
(let*
   ; ------ Initialise and load image ---------------------------------------
   ((inputFileName    "${INPUT_FILENAME}")
    (outputFileName   "${OUTPUT_FILENAME}")
    (tileType         ${TILE_TYPE})
    (tileTypeString   "${TILE_TYPESTRING}")
    (tileSize         ${TILE_SIZE})
    (tileHeight       ${TILE_HEIGHT})
    (tileSpacing      ${TILE_SPACING})
    (tileNeatness     ${TILE_NEATNESS})
    (tileSurface      ${TILE_SURFACE})
    (image            (car (gimp-file-load RUN-NONINTERACTIVE inputFileName inputFileName)))
    (layer            (if (not (defined? 'gimp-image-get-active-layer))
                         ; New Gimp 3.0 API:
                         (car (list (vector-ref (car (gimp-image-get-selected-layers image)) 0)))
                         ; Old Gimp 2.x API:
                         (car (gimp-image-get-active-layer image)))
                      )
   )

   ; ------ Apply filter ----------------------------------------------------
   ; First, make sure that the image is RGB, not indexed color mode!
;   (if (not (= RGB (car (gimp-image-base-type image))))
;             (gimp-image-convert-rgb image))

   (cond( (not(defined? 'plug-in-mosaic))
      ; New Gimp 3.0 API:
      (gimp-drawable-merge-new-filter layer "gegl:mosaic" 0 LAYER-MODE-REPLACE 1.0
          "tile-size"       tileSize
          "tile-height"     tileHeight
          "tile-spacing"    tileSpacing
          "tile-neatness"   tileNeatness
          "antialiasing"    TRUE
          "light-dir"       135
          "color-variation" 0.2
          "tile-type"       tileTypeString
          "tile-surface"    TRUE
          "seed"            0
      )
   )
   (else
      ; Old Gimp 2.x API:
      (plug-in-mosaic RUN-NONINTERACTIVE image layer
         tileSize tileHeight tileSpacing
         tileNeatness TRUE 135.0 0.2 TRUE TRUE
         tileType tileSurface FALSE
   )))

   ; ------ Save result -----------------------------------------------------
   (cond( (not(defined? 'file-png-save2))
      ; New Gimp 3.0 API:
      ; FIXME: This does not work when running in Gimp 2.x!
      ; (file-png-export
      ;    #:run-mode         RUN-NONINTERACTIVE
      ;    #:image            image
      ;    #:file             outputFileName
      ;    #:options          -1
      ;    #:interlaced       TRUE
      ;    #:compression      9
      ;    #:bkgd             TRUE
      ;    #:offs             FALSE
      ;    #:phys             TRUE
      ;    #:time             TRUE
      ;    #:save-transparent FALSE
      ;    #:optimize-palette TRUE
      ; )
      (file-png-export RUN-NONINTERACTIVE image outputFileName -1 TRUE 9 TRUE FALSE TRUE TRUE FALSE TRUE)
   )
   (else
      ; Old Gimp 2.x API:
      (file-png-save2 RUN-NONINTERACTIVE image layer outputFileName outputFileName TRUE 9 TRUE TRUE FALSE TRUE TRUE FALSE TRUE
   )))

   ; Clean up:
   (gimp-image-delete image)
)
(gimp-quit TRUE)
EOF
) | env LANG=C HOME=/tmp gimp --new-instance --no-interface --no-splash --batch-interpreter plug-in-script-fu-eval --batch - 2>&1 | \
(
   if [ ${VERBOSE} -eq 0 ] ; then
      cat
   else
      grep -vE "^ts>|(#t)|^Copyright|^Welcome|scriptfu-WARNING|^Please use named arguments:|^$" || true
   fi
)

if [ ! -e "${OUTPUT_FILENAME}" ] ; then
   echo >&2 "ERROR: ${OUTPUT_FILENAME} has not been produced. Something went wrong!"
   exit 1
fi

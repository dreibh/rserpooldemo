#!/usr/bin/env bash
#
# Caption Script
# Copyright (C) 2017-2025 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: thomas.dreibholz@gmail.com

# Bash options:
set -e


# Example:
# Make-Caption Caption.png "Caption Text" 1024 42 "Noto Sans Bold" 60
# Make-Caption Caption.png "Caption Text" 1024 42 "Noto Sans Bold" 60 "#02266b" "#ffd700" 26


# ====== Handle arguments ===================================================
usage () {
   local exitCode="$1"
   echo >&2 "Usage: $0 output_filename caption_text caption_width caption_height font font_size_percent [--foreground|-f color] [--background|-b color] [--transparency|-t percentage] [--verbose|-v] [--quiet|-q] [--help|-h]"
   echo >&2 "Example: $0 Caption.png \"Caption Text\" 1024 42 \"Noto Sans Bold\" 60 \"#02266b\" \"#ffd700\" 26"
   exit "${exitCode}"
}

GETOPT="$(PATH=/usr/local/bin:$PATH which getopt)"
# shellcheck disable=SC2068
options="$(${GETOPT} -o f:b:t:vqh --long foreground:,background:,transparency:,verbose,quiet,help -a -- "$@")"
eval set -- "${options}"

COLOR_FOREGROUND="#02266b"   # Dark Blue
COLOR_BACKGROUND="#ffd700"   # Gold
TRANSPARENCY=25              # %
VERBOSE=1
while [ $# -gt 0 ] ; do
   case "$1" in
      -f | --foreground)
         COLOR_FOREGROUND="$2"
         shift 2
         ;;
      -b | --background)
         COLOR_BACKGROUND="$2"
         shift 2
         ;;
      -t | --transparency)
         TRANSPARENCY="$2"
         shift 2
         ;;
      -v | --verbose)
         VERBOSE=1
         shift
         ;;
      -q | --quiet)
         VERBOSE=0
         shift
         ;;
      -h | --help)
         usage 0
         ;;
      --)
         shift
         break
         ;;
      *)
         usage 1
         ;;
  esac
done

if [ $# -lt 6 ] ; then
   usage 1
fi
OUTPUT_FILENAME="$1"
CAPTION_TEXT="$2"
CAPTION_WIDTH=$3
CAPTION_HEIGHT=$4
FONT_NAME="$5"
FONT_SIZE=$6

if [[ ! "${TRANSPARENCY}" =~ ^[0-9]+$ ]] || [ ${TRANSPARENCY} -lt 0 ] || [ ${TRANSPARENCY} -gt 100 ] ; then
   echo >&2 "ERROR: Invalid transparency value!"
   exit 1
fi
if [[ ! "${CAPTION_WIDTH}" =~ ^[0-9]+$ ]] ; then
   echo >&2 "ERROR: Invalid caption width!"
   exit 1
fi
if [[ ! "${CAPTION_HEIGHT}" =~ ^[0-9]+$ ]] ; then
   echo >&2 "ERROR: Invalid caption height!"
   exit 1
fi


# ====== Obtain GIMP call options ===========================================
if ! whereis gimp >/dev/null ; then
   echo >&2 "ERROR: Gimp is not available!"
   exit 1
fi
GIMP_VERSION="$(LANG=C gimp --version | sed -e 's/GNU Image Manipulation Program version //')"
if [[ "${GIMP_VERSION}" =~ ^[012] ]] ; then
   # Gimp 2.x:
   GIMP_OPTIONS="--new-instance --no-interface --no-splash --batch-interpreter plug-in-script-fu-eval --batch -"
else
   # Gimp 3.x:
   GIMP_OPTIONS="--quit --new-instance --no-interface --no-splash --batch-interpreter plug-in-script-fu-eval --batch -"
fi


# ====== Call GIMP ==========================================================
rm -f "${OUTPUT_FILENAME}"
( cat <<EOF
(let*
   ; ------ Initialise ------------------------------------------------------
   ((outputFileName   "${OUTPUT_FILENAME}")
    (captionText      "${CAPTION_TEXT}")
    (captionWidth     ${CAPTION_WIDTH})
    (captionHeight    ${CAPTION_HEIGHT})
    (captionFont      "${FONT_NAME}")
    (captionFontSize  (/ (* ${FONT_SIZE} captionHeight) 100))
    (captionOpacity   (- 100 ${TRANSPARENCY}))
    (captionFGColor   "${COLOR_FOREGROUND}")
    (captionBGColor   "${COLOR_BACKGROUND}")
    (theText)
    (drawable)
    (image (car (gimp-image-new captionWidth captionHeight RGB)))
    (layer1 (car (gimp-layer-new image captionWidth captionHeight RGBA-IMAGE "Layer 1" captionOpacity NORMAL-MODE)))
    (layer2 (car (gimp-layer-new image captionWidth captionHeight RGBA-IMAGE "Layer 2" 100 NORMAL-MODE)))
   )

   ; ------ Generate caption ------------------------------------------------
   (gimp-image-add-layer image layer1 0)
   (gimp-image-add-layer image layer2 0)
   (gimp-context-set-background captionBGColor)
   (gimp-context-set-foreground captionFGColor)
   (gimp-drawable-fill layer1 BACKGROUND-FILL)

   (set! theText (car (gimp-text-fontname image layer2 0 0 captionText 0 TRUE captionFontSize PIXELS captionFont) ) )
   (gimp-layer-set-offsets
      theText
      (/ (- captionWidth  (car (gimp-drawable-width  theText))) 2)
      (/ (- captionHeight (car (gimp-drawable-height theText))) 2))

   (gimp-image-merge-visible-layers image CLIP-TO-IMAGE)
   ; (gimp-display-new image)

   ; ------ Save result -----------------------------------------------------
   (cond( (not(defined? 'file-png-save2))
      ; New Gimp 3.0 API:
      ; FIXME: This does not work when running in Gimp 2.x!
      ; (file-png-export
      ;    #:run-mode         RUN-NONINTERACTIVE
      ;    #:image            image
      ;    #:file             outputFileName
      ;    #:options          -1
      ;    #:interlaced       TRUE
      ;    #:compression      6
      ;    #:bkgd             TRUE
      ;    #:offs             FALSE
      ;    #:phys             TRUE
      ;    #:time             TRUE
      ;    #:save-transparent FALSE
      ;    #:optimize-palette TRUE
      ; )
      (file-png-export RUN-NONINTERACTIVE image outputFileName -1 TRUE 9 TRUE FALSE TRUE TRUE FALSE TRUE)
   )
   (else
      ; Old Gimp 2.x API:
      (file-png-save2 RUN-NONINTERACTIVE image layer outputFileName outputFileName TRUE 6 TRUE TRUE FALSE TRUE TRUE FALSE TRUE
   )))

   ; ------ Clean up --------------------------------------------------------
   (gimp-image-delete image)
   (gimp-quit TRUE)
)
EOF
) | env LANG=C HOME=/tmp gimp ${GIMP_OPTIONS} 2>&1 | \
(
   if [ ${VERBOSE} -ne 0 ] ; then
      cat
   else
      grep -vE "^ts>|(#t)|^Copyright|^Welcome|^using gegl copy|scriptfu-WARNING|LibGimp-WARNING|^Please use named arguments:|^script quit with code:|^$" || true
   fi
)


# ====== Check result =======================================================
if [ ! -e "${OUTPUT_FILENAME}" ] ; then
   echo >&2 "ERROR: ${OUTPUT_FILENAME} has not been produced. Something went wrong!"
   exit 1
fi
